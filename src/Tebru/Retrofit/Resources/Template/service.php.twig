
namespace {{ 'Tebru\\Retrofit\\Service\\NS' ~ className }}
{
    use GuzzleHttp\ClientInterface;
    use JMS\Serializer\SerializerInterface;
{% for use in uses %}
    {{ use }}
{% endfor %}

    class {{ className }} implements \{{ interfaceName }}
    {
        private $baseUrl;
        private $client;
        private $serializer;

        public function __construct($baseUrl, ClientInterface $client, SerializerInterface $serializer)
        {
            $this->baseUrl = $baseUrl;
            $this->client = $client;
            $this->serializer = $serializer;
        }
{% for method in methods %}

        {{ method.methodDeclaration }}
        {
            $options = {{ print_array(method.options)|raw }};
{% if method.options.body is not empty %}
            if (is_object({{ method.options.body }})) {
                $options['body'] = $this->serializer->serialize({{ method.options.body }}, 'json');
            } else {
                $options['body'] = {{ method.options.body }};
            }

{% elseif method.parts is not empty %}
            $options['body'] = {{ print_array(method.parts)|raw }};
{% endif %}

            $request = $this->client->createRequest('{{ method.type|upper }}', $this->baseUrl . "{{ method.path }}", $options);

            $request->setQuery({{ print_array(method.query)|raw }});
            $request->addHeaders({{ print_array(method.headers)|raw }});

            $response = $this->client->send($request);

{% if 'raw' == method.return %}
            return (string)$response->getBody();
{% elseif 'array' == method.return %}
            return json_decode((string)$response->getBody(), true);
{% else %}
            return $this->serializer->deserialize((string)$response->getBody(), '{{ method.return }}', 'json');
{% endif %}
        }
{% endfor %}
    }
}
