
namespace {{ namespace }};

use GuzzleHttp\ClientInterface;
use JMS\Serializer\SerializerInterface;
{% for use in uses %}
{{ use }}
{% endfor %}

class {{ className }} implements \{{ interfaceName }}
{
    private $baseUrl;
    private $client;
    private $serializer;

    public function __construct($baseUrl, ClientInterface $client, SerializerInterface $serializer)
    {
        $this->baseUrl = $baseUrl;
        $this->client = $client;
        $this->serializer = $serializer;
    }
{% for method in methods %}

    {{ method.methodDeclaration|raw }}
    {
{% set methodType = method.type|upper %}
{% set path = method.path %}
{% set bodyKey = (method.jsonBody) ? 'json' : 'body' %}
{% if method.options.body is not empty %}
        if (is_object({{ method.options.body }})) {
            $options['body'] = $this->serializer->serialize({{ method.options.body }}, 'json');
        } elseif (is_array({{ method.options.body }})) {
            $options['{{ bodyKey }}'] = {{ method.options.body }};
        } else {
            $options['body'] = {{ method.options.body }};
        }

        $request = $this->client->createRequest('{{ methodType }}', $this->baseUrl . "{{ path }}", $options);
{% elseif method.parts is not empty %}
        $request = $this->client->createRequest('{{ methodType }}', $this->baseUrl . "{{ path }}", ['{{ bodyKey }}' => {{ print_array(method.parts)|raw }}]);
{% else %}
        $request = $this->client->createRequest('{{ methodType }}', $this->baseUrl . "{{ path }}", []);
{% endif %}
{% if method.query is not empty %}
        $request->setQuery({{ print_array(method.query)|raw }});
{% endif %}
{% if method.headers is not empty %}
        $request->addHeaders({{ print_array(method.headers)|raw }});
{% endif %}
{% if 'json' == bodyKey %}

        if (!$request->hasHeader('Content-Type')) {
            $request->setHeader('Content-Type', 'application/json');
        }
{% endif %}

        $response = $this->client->send($request);

{% if 'raw' == method.return %}
        return (string)$response->getBody();
{% elseif 'array' == method.return %}
        return json_decode((string)$response->getBody(), true);
{% else %}
        return $this->serializer->deserialize((string)$response->getBody(), '{{ method.return|raw }}', 'json');
{% endif %}
    }
{% endfor %}
}
