
namespace {{ namespace }};

use Guzzle\Http\ClientInterface;
use JMS\Serializer\DeserializationContext;
use JMS\Serializer\SerializationContext;
use JMS\Serializer\SerializerInterface;
{% for use in uses %}
{{ use }}
{% endfor %}

class {{ className }} implements \{{ interfaceName }}
{
    private $baseUrl;
    private $client;
    private $serializer;
    private $serializationContext;

    public function __construct(
        $baseUrl,
        ClientInterface $client,
        SerializerInterface $serializer,
        SerializationContext $serializationContext = null,
        DeserializationContext $deserializationContext = null
    ) {
        $this->baseUrl = $baseUrl;
        $this->client = $client;
        $this->serializer = $serializer;
        $this->serializationContext = $serializationContext;
        $this->deserializationContext = $deserializationContext;
    }
{% for method in methods %}

    {{ method.methodDeclaration|raw }}
    {
{% set methodType = method.type|upper %}
{% set path = method.path %}
{% set bodyKey = (method.jsonBody) ? 'json' : 'body' %}
        $requestUrl = {% if method.url is null %}$this->baseUrl . "{{ path }}"{% else %}{{ method.url }}{% endif %};
{% if method.query is not empty %}
        $query = http_build_query({{ print_array(method.query)|raw }});
        $requestUrl .= '?' . $query;
{% endif %}
{% if method.options.body is not empty %}
        if (is_object({{ method.options.body }})) {
{% if method.serializationContext is not empty %}
            $serializationContext = new SerializationContext();
{% if method.serializationContext.groups %}
            $serializationContext->setGroups({{ print_array(method.serializationContext.groups)|raw }});
{% endif %}
{% if method.serializationContext.serializeNull is defined %}
{% set serializeNull = (method.serializationContext.serializeNull) ? 'true' : 'false' %}
            $serializationContext->setSerializeNull({{ serializeNull }});
{% endif %}
{% if method.serializationContext.version %}
            $serializationContext->setVersion({{ method.serializationContext.version }});
{% endif %}
{% if method.serializationContext.attributes is not empty %}
{% for key, value in method.serializationContext.attributes %}
            $serializationContext->setAttribute('{{ key }}', '{{ value }}');
{% endfor %}
{% endif %}
            $options['body'] = $this->serializer->serialize({{ method.options.body }}, 'json', $serializationContext);
{% else %}
            $options['body'] = $this->serializer->serialize({{ method.options.body }}, 'json', $this->serializationContext);
{% endif %}
        } elseif (is_array({{ method.options.body }})) {
            $options['{{ bodyKey }}'] = {{ method.options.body }};
        } else {
            $options['body'] = {{ method.options.body }};
        }

        $request = $this->client->createRequest('{{ methodType }}', $requestUrl, $options);
{% elseif method.parts is not empty %}
        $request = $this->client->createRequest('{{ methodType }}', $requestUrl, ['{{ bodyKey }}' => {{ print_array(method.parts)|raw }}]);
{% else %}
        $request = $this->client->createRequest('{{ methodType }}', $requestUrl, []);
{% endif %}
{% if method.headers is not empty %}
        $request->addHeaders({{ print_array(method.headers)|raw }});
{% endif %}
{% if 'json' == bodyKey %}

        if (!$request->hasHeader('Content-Type')) {
            $request->setHeader('Content-Type', 'application/json');
        }
{% endif %}

        $response = $this->client->send($request);

{% if 'raw' == method.return %}
        return (string)$response->getBody();
{% elseif 'array' == method.return %}
        return json_decode((string)$response->getBody(), true);
{% elseif method.deserializationContext is not empty %}
        $deserializationContext = new DeserializationContext();
{% if method.deserializationContext.depth %}
        while ($deserializationContext->getDepth() > {{ method.deserializationContext.depth }}) {
            $deserializationContext->decreaseDepth();
        }
        while ($deserializationContext->getDepth() < {{ method.deserializationContext.depth }}) {
            $deserializationContext->increaseDepth();
        }
{% endif %}
{% if method.deserializationContext.groups %}
        $deserializationContext->setGroups({{ print_array(method.deserializationContext.groups)|raw }});
{% endif %}
{% if method.deserializationContext.serializeNull is defined %}
{% set serializeNull = (method.deserializationContext.serializeNull) ? 'true' : 'false' %}
        $deserializationContext->setSerializeNull({{ serializeNull }});
{% endif %}
{% if method.deserializationContext.version %}
        $deserializationContext->setVersion({{ method.deserializationContext.version }});
{% endif %}
{% if method.deserializationContext.attributes is not empty %}
{% for key, value in method.deserializationContext.attributes %}
        $deserializationContext->setAttribute('{{ key }}', '{{ value }}');
{% endfor %}
{% endif %}
        return $this->serializer->deserialize((string)$response->getBody(), '{{ method.return|raw }}', 'json', $deserializationContext);
{% else %}
        return $this->serializer->deserialize((string)$response->getBody(), '{{ method.return|raw }}', 'json', $this->deserializationContext);
{% endif %}
    }
{% endfor %}
}
